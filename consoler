#!/usr/bin/python
import os
import sys
import time
import BaseHTTPServer
import select
import threading
import signal
import tty
import Queue


SHUTDOWN_EVENT = threading.Event()
PORT = 8000
HTML_PATH = os.path.dirname(os.path.realpath(__file__)) + '/consoler.html'
if not os.path.exists(HTML_PATH):
	raise Exception('Unable to find consoler.html using %r' % HTML_PATH)
Q = Queue.Queue()

class MyHandler(BaseHTTPServer.BaseHTTPRequestHandler):
	def do_GET(self):
		print self.path
		if self.path == '/events':
			self.serveEvents()
		else:
			self.serveHtml()
	def serveHtml(self):
		with open(HTML_PATH) as f:
			html = f.read()
		self.send_response(200)
		self.send_header('Content-type', 'text/html')
		self.end_headers()
		self.wfile.write(html)
	def serveEvents(self):
		self.send_response(200)
		self.send_header('Content-type', 'text/event-stream')
		self.send_header('Cache-Control', 'no-cache');
		self.end_headers()
		while True:
			try:
				line = Q.get(True, 1.0/16)
				self.wfile.write('data: %r\n\n' % line)
				print 'Sent event %r' % line
			except Queue.Empty:
				pass
			if SHUTDOWN_EVENT.isSet():
				break;
class HttpServerThread(threading.Thread):
	def __init__(self):
		threading.Thread.__init__(self)
		self.httpd = BaseHTTPServer.HTTPServer(('', PORT), MyHandler)
	def run(self):
		print 'Consoler serves HTTP at port', PORT
		self.httpd.serve_forever()
	def shutdown(self):
		print 'Consoler shuts down'
		SHUTDOWN_EVENT.set()
		self.httpd.shutdown()
hst = HttpServerThread()
hst.start()
hst.join(1.0/256)

stdin = ''
p = select.poll()
p.register(sys.stdin)
try:
	while True:
		fds = p.poll()
		line = sys.stdin.readline()
		sys.stdout.write(line)
		if not line:
			break
		Q.put(line)
except KeyboardInterrupt:
	pass
finally:
	hst.shutdown()
print
